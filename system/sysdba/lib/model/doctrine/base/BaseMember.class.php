<?php

/**
 * BaseMember
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $hashed_password
 * @property string $name
 * @property string $name_roman
 * @property integer $gender
 * @property date $birth_date
 * @property string $language_code
 * @property integer $registration_code
 * @property string $mail_address
 * @property integer $status
 * @property timestamp $deleted_at
 * @property timestamp $created_at
 * @property integer $created_by
 * @property timestamp $updated_at
 * @property integer $updated_by
 * 
 * @method integer   getId()                Returns the current record's "id" value
 * @method string    getHashedPassword()    Returns the current record's "hashed_password" value
 * @method string    getName()              Returns the current record's "name" value
 * @method string    getNameRoman()         Returns the current record's "name_roman" value
 * @method integer   getGender()            Returns the current record's "gender" value
 * @method date      getBirthDate()         Returns the current record's "birth_date" value
 * @method string    getLanguageCode()      Returns the current record's "language_code" value
 * @method integer   getRegistrationCode()  Returns the current record's "registration_code" value
 * @method string    getMailAddress()       Returns the current record's "mail_address" value
 * @method integer   getStatus()            Returns the current record's "status" value
 * @method timestamp getDeletedAt()         Returns the current record's "deleted_at" value
 * @method timestamp getCreatedAt()         Returns the current record's "created_at" value
 * @method integer   getCreatedBy()         Returns the current record's "created_by" value
 * @method timestamp getUpdatedAt()         Returns the current record's "updated_at" value
 * @method integer   getUpdatedBy()         Returns the current record's "updated_by" value
 * @method Member    setId()                Sets the current record's "id" value
 * @method Member    setHashedPassword()    Sets the current record's "hashed_password" value
 * @method Member    setName()              Sets the current record's "name" value
 * @method Member    setNameRoman()         Sets the current record's "name_roman" value
 * @method Member    setGender()            Sets the current record's "gender" value
 * @method Member    setBirthDate()         Sets the current record's "birth_date" value
 * @method Member    setLanguageCode()      Sets the current record's "language_code" value
 * @method Member    setRegistrationCode()  Sets the current record's "registration_code" value
 * @method Member    setMailAddress()       Sets the current record's "mail_address" value
 * @method Member    setStatus()            Sets the current record's "status" value
 * @method Member    setDeletedAt()         Sets the current record's "deleted_at" value
 * @method Member    setCreatedAt()         Sets the current record's "created_at" value
 * @method Member    setCreatedBy()         Sets the current record's "created_by" value
 * @method Member    setUpdatedAt()         Sets the current record's "updated_at" value
 * @method Member    setUpdatedBy()         Sets the current record's "updated_by" value
 * 
 * @package    sysdba
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMember extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('member');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('hashed_password', 'string', 32, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 32,
             ));
        $this->hasColumn('name', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('name_roman', 'string', 128, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 128,
             ));
        $this->hasColumn('gender', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('birth_date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('language_code', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('registration_code', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('mail_address', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('deleted_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('created_by', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_by', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             ));
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);
    }
}